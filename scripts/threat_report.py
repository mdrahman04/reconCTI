import json
import os
from fpdf import FPDF
import webbrowser

# File locations
ANALYSIS_FILE = "temp_analysis.json"
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
REPORT_FILE = os.path.join(ROOT_DIR, "threat_report.pdf")


class PDFReport(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Threat Analysis Report", ln=True, align="C")
        self.set_font("Arial", "", 11)
        self.cell(0, 10, "Generated by ReconCTI", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, f"Page {self.page_no()}", 0, 0, "C")

    def section_title(self, title):
        self.set_font("Arial", "B", 12)
        self.set_fill_color(220, 220, 220)
        self.cell(0, 10, title, ln=True, fill=True)
        self.ln(2)

    def add_threat_entry(self, threat):
        self.set_font("Arial", "", 11)
        self.multi_cell(0, 8, f"Data Type: {threat.get('data_type')}")
        self.multi_cell(0, 8, f"Matched Value: {threat.get('matched_value')}")
        self.multi_cell(0, 8, f"Found In: {threat.get('found_in')}")
        self.multi_cell(0, 8, f"Website: {threat.get('website')}")
        self.multi_cell(0, 8, f"Highlight Link: {threat.get('highlight_link')}")
        self.ln(1)

        if threat.get("possible_risks"):
            self.set_font("Arial", "B", 11)
            self.cell(0, 8, "Possible Risks:", ln=True)
            self.set_font("Arial", "", 11)
            for risk in threat["possible_risks"]:
                self.multi_cell(0, 7, f" - {risk}")

        if threat.get("mitigations"):
            self.set_font("Arial", "B", 11)
            self.cell(0, 8, "Mitigations:", ln=True)
            self.set_font("Arial", "", 11)
            for m in threat["mitigations"]:
                self.multi_cell(0, 7, f" - {m}")

        if threat.get("mitre_mapping"):
            mitre = threat["mitre_mapping"]
            if mitre:
                self.set_font("Arial", "B", 11)
                self.cell(0, 8, "MITRE Mapping:", ln=True)
                self.set_font("Arial", "", 11)
                self.multi_cell(0, 7, f"Tactic: {mitre.get('tactic')}")
                self.multi_cell(0, 7, f"Technique: {mitre.get('technique')}")
                self.multi_cell(0, 7, f"Description: {mitre.get('description')}")
                self.multi_cell(0, 7, f"Mitigation ID: {mitre.get('mitigation_id')}")

        self.ln(10)


def generate_pdf_report():
    if not os.path.exists(ANALYSIS_FILE):
        print("[!] Analysis file not found. Please run threat analysis first.")
        return

    with open(ANALYSIS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)

    if not data:
        print("[!] No threat data to generate report.")
        return

    pdf = PDFReport()
    pdf.add_page()

    for i, threat in enumerate(data, start=1):
        pdf.section_title(f"Threat #{i}")
        pdf.add_threat_entry(threat)

    pdf.output(REPORT_FILE)
    print(f"[✔] Report generated: {REPORT_FILE}")

    try:
        # Open using Firefox explicitly
        webbrowser.register('firefox', None, webbrowser.BackgroundBrowser('/usr/bin/firefox'))
        webbrowser.get('firefox').open_new_tab(f"file://{REPORT_FILE}")
        print("[✔] Report opened in browser.")
    except Exception as e:
        print(f"[!] Could not open report automatically: {e}")


# Uncomment this if you want the script to run standalone for testing
# if __name__ == "__main__":
#     generate_pdf_report()
